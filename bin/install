#!/usr/bin/env bash
# Installation script to help me install my dotfiles across different platforms

readonly USAGE="USAGE: ${0##*/} [OPTIONS]"
readonly INSTALL_PATH="$( cd $( dirname $0 )/../ && pwd )"
readonly VIM_REPO='https://github.com/evanthegrayt/vimfiles.git'
readonly ZSH_CUSTOM_REPO='https://github.com/evanthegrayt/oh-my-zsh-custom.git'

source $INSTALL_PATH/lib/install_helpers.sh

ITALICS=false
INSTALL_DOTFILES=false
UNINSTALL_DOTFILES=false
REINSTALL_OLD_DOTFILES=false
INSTALL_VIM=false
INSTALL_ZSH=false
INSTALL_BASH=false
INSTALL_RVM=false
FORCE=false
BACKUP=false
ALLOW_IGNORED=false

while getopts 'auLfvzbrRFBiC:U:s:h' opts; do
    case $opts in
        a)  ALLOW_IGNORED=true          ;;
        u)  UNINSTALL_DOTFILES=true     ;;
        L)  EXTENSION='local'           ;;
        f)  INSTALL_DOTFILES=true       ;;
        v)  INSTALL_VIM=true            ;;
        z)  INSTALL_ZSH=true            ;;
        b)  INSTALL_BASH=true           ;;
        r)  INSTALL_RVM=true            ;;
        R)  REINSTALL_OLD_DOTFILES=true ;;
        F)  FORCE=true                  ;;
        B)  EXTENSION='bak'             ;;
        i)  ITALICS=true                ;;
        C)
            CHANGE_SHELL=$OPTARG
            case $CHANGE_SHELL in
                z|zsh)  CHANGE_SHELL='zsh'               ;;
                b|bash) CHANGE_SHELL='bash'              ;;
                c|csh)  CHANGE_SHELL='csh'               ;;
                *) abort "Must pass '-C [bash|zsh|csh]'" ;;
            esac
            ;;
        U)
            UNINSTALL_SINGLE=$OPTARG
            if [[ $UNINSTALL_SINGLE =~ ^\. ]]; then
                UNINSTALL_SINGLE=${UNINSTALL_SINGLE#*.}
            fi
            ;;
        s)
            SINGLE_FILE=$OPTARG
            if [[ $SINGLE_FILE =~ ^\. ]]; then
                SINGLE_FILE=${SINGLE_FILE#*.}
            fi
            if [[ ! -f $INSTALL_PATH/resource/$SINGLE_FILE ]]; then
                abort "$INSTALL_PATH/resource/$SINGLE_FILE not a valid dotfile!"
            fi
            ;;
        h) print_help     ;;
        *) abort "$USAGE" ;;
    esac
done

readonly FORCE EXTENSION INSTALL_DOTFILES INSTALL_VIM INSTALL_ZSH
readonly INSTALL_RVM BACKUP ITALICS CHANGE_SHELL INSTALL_BASH UNINSTALL_DOTFILES
readonly REINSTALL_OLD_DOTFILES UNINSTALL_SINGLE ALLOW_IGNORED

if (( $# == 0 )); then
    abort "$USAGE"
elif $INSTALL_DOTFILES && [[ -n $SINGLE_FILE ]]; then
    abort "$USAGE\nCannot pass '-f' with '-s FILE'"
elif $UNINSTALL_DOTFILES && [[ -n $UNINSTALL_SINGLE ]]; then
    abort "$USAGE\nCannot pass '-u' with '-U FILE'"
elif $INSTALL_DOTFILES && $UNINSTALL_DOTFILES; then
    abort "$USAGE\nCannot install and uninstall at the same time..."
fi

if [[ -n $UNINSTALL_SINGLE ]]; then
    unlink_dotfile "$UNINSTALL_SINGLE"
elif $UNINSTALL_DOTFILES; then
    for file in $INSTALL_PATH/resource/*; do
        unlink_dotfile "$file"
    done
fi

if [[ -n $CHANGE_SHELL ]]; then
    shell="$( grep "$CHANGE_SHELL$" /etc/shells 2>/dev/null | tail -n 1 )"

    if [[ -x "$shell" ]]; then
        log "Changing login shell to $shell."
        chsh -s "$shell"
    else
        log "Cannot change shell; $shell executable not found."
    fi
fi

if [[ -n $SINGLE_FILE ]]; then
    link_dotfile "$INSTALL_PATH/resource/$SINGLE_FILE"
elif $INSTALL_DOTFILES; then
    for file in $INSTALL_PATH/resource/*; do
        link_dotfile "$file"
    done
fi

if $ITALICS; then
    log "Enabling italics; sourcing $INSTALL_PATH/xterm-256color.terminfo"
    tic $INSTALL_PATH/xterm-256color.terminfo
fi

if $INSTALL_VIM; then
    if [[ -d $HOME/.vim ]]; then
        if $FORCE; then
            log "Forcing removal of $HOME/.vim"
            rm -rf $HOME/.vim
        elif [[ -n $EXTENSION ]]; then
            log "$HOME/.vim exists; moving to $HOME/.vim.$EXTENSION"
            mv $HOME/.vim{,.$EXTENSION}
        else
            log "$HOME/.vim exists. Run with '-F' to force, or '-B' to back-up"
        fi
    fi
    [[ -d $HOME/.vim ]] || clone_vim
fi

if $INSTALL_RVM; then
    if which rvm > /dev/null; then
        log "Skipping rvm installation; already installed."
    else
        log "Installing rvm"
        "curl" -sSL https://get.rvm.io | bash -s stable
    fi
fi

if $INSTALL_ZSH; then
    if [[ ! -d $HOME/.oh-my-zsh ]]; then
        log "Installing $HOME/.oh-my-zsh"
        git clone https://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh
        rm -rf $HOME/.oh-my-zsh/custom
        log "Installing $HOME/.oh-my-zsh/custom from $ZSH_CUSTOM_REPO"
        git clone $ZSH_CUSTOM_REPO $HOME/.oh-my-zsh/custom
    fi
fi

if $INSTALL_BASH; then
    if [[ ! -d $HOME/.bash_it ]]; then
        log "Installing $HOME/.bash_it"
        git clone https://github.com/Bash-it/bash-it.git $HOME/.bash_it
    fi
fi

